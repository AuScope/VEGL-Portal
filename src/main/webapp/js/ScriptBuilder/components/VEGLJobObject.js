/*
 * This file is part of the AuScope Virtual Exploration Geophysics Lab (VEGL) project.
 * Copyright (c) 2011 CSIRO Earth Science and Resource Engineering
 *
 * Licensed under the terms of the GNU Lesser General Public License.
 */
Ext.define('ScriptBuilder.components.VEGLJobObject', {
    extend : 'ScriptBuilder.components.BasePythonComponent',

    jobObject : null,

    constructor: function(config) {
        var me = this;

        Ext.apply(config, {
            bodyStyle: "padding:5px;",
            labelWidth: 150,
            defaults: { anchor: "100%" },
            items: [{
                bodyStyle: "padding:5px;",
                labelWidth: 150,
                defaults: { anchor: "100%" },
                items: [{
                    xtype: "label",
                    id : "VEGLJobObjectForm-label",
                    text: "Loading Job Object..."
                }],
                listeners: {
                    render: function() {
                        var loadMask = new Ext.LoadMask(Ext.getBody(), {
                            msg : 'Loading Job Object...',
                            removeMask : true
                        });
                        loadMask.show();

                        var jobId = Ext.getCmp("scriptbuilder-form").wizardState.jobId;
                        Ext.Ajax.request({
                            url : "getJobObject.do",
                            params : {jobId : jobId},
                            callback : function(options, success, response) {
                                loadMask.hide();
                                if (success) {
                                    var responseObj = Ext.JSON.decode(response.responseText);
                                    if (responseObj.success) {
                                        me.setValues(responseObj.data[0]);
                                        Ext.getCmp("VEGLJobObjectForm-label").setText("Object successfully loaded. Press OK");
                                        return;
                                    }
                                }

                                Ext.getCmp("VEGLJobObjectForm-label").setText("Object loading failed.");
                            }
                        });
                    }
                }
            }]
        });

        this.callParent(arguments);
    },

    getValues : function() {
        if (this.jobObject) {
            return this.jobObject.data;
        } else {
            return {};
        }
    },

    setValues : function(values) {
        this.jobObject = Ext.create('vegl.models.Job', values);
    },

    /**
     * This is where we dynamically generate a python Getter/Setter class from the job object that
     * is sent to us
     */
    getScript : function() {
        var classText = '';
        var values = this.getValues();

        //Generate our utility VEGLBBox class
        classText += '# Autogenerated Getter/Setter class' + this._newLine;
        classText += this._popoClass('VEGLBBox', ['srs', 'maxNorthing', 'minNorthing', 'maxEasting', 'minEasting']);
        classText += this._tab + '# Returns true if the specified northing/easting (assumed to be in the same SRS)' + this._newLine;
        classText += this._tab + '# lies within the spatial area represented by this bounding box. ' + this._newLine;
        classText += this._tab + 'def isPointInsideArea(self, northing, easting):' + this._newLine;
        classText += this._tab + this._tab + 'return ((easting >= self._minEasting) and (easting <= self._maxEasting) and (northing >= self._minNorthing) and (northing <= self._maxNorthing))' + this._newLine;
        classText += this._newLine;

        //Iterate our fields to figure out which ones we want to include
        var blacklistedFields = {
            //some fields should not be encoded (eg credentials). This script will be publicly available.
            //Other fields could cause the script to lose it's portability (scripts should be re-runnable in different jobs)
            //Most of these blacklisted fields will be encoded into the vgl-bootstrap
            'storageProvider' : true,
            'storageEndpoint' : true,
            'storageBucket' : true,
            'storageSecretKey' : true,
            'storageAccessKey' : true,

            'computeVmId' : true,
            'computeInstanceId' : true,
            'computeInstanceType' : true,
            'computeInstanceKey' : true,

            'status' : true,
            'registeredUrl' : true
        };
        var fieldsToInclude = [];
        for (var field in values) {
            if (blacklistedFields[field]) {
                continue;
            }

            var value = values[field];
            if (Ext.isFunction(value)) {
                //Ignore functions
            } else if (Ext.isObject(value)) {
                //Ignore complex fields for the moment
            } else if (Ext.isPrimitive(value)) {
                //Primitive fields turn into 'Getters'
                fieldsToInclude.push(field);
            }
        }
        //Generate our getter/setter class
        classText += '# Autogenerated Getter/Setter class' + this._newLine;
        classText += this._popoClass('VEGLParameters', fieldsToInclude);
        classText += this._tab + '# Gets an instance of VEGLBBox representing the padded bounds' + this._newLine;
        classText += this._tab + 'def getPaddedBounds(self):' + this._newLine;
        classText += this._tab + this._tab + 'return VEGLBBox(srs=self._mgaZone, maxNorthing=self._paddingMaxNorthing, maxEasting=self._paddingMaxEasting, minNorthing=self._paddingMinNorthing, minEasting=self._paddingMinEasting)' + this._newLine;
        classText += this._newLine;
        classText += this._tab + '# Gets an instance of VEGLBBox representing the padded bounds' + this._newLine;
        classText += this._tab + 'def getSelectedBounds(self):' + this._newLine;
        classText += this._tab + this._tab + 'return VEGLBBox(srs="EPSG:4326", maxNorthing=self._selectionMaxNorthing, maxEasting=self._selectionMaxEasting, minNorthing=self._selectionMinNorthing, minEasting=self._selectionMinEasting)' + this._newLine;
        classText += this._newLine;

        //Instantiate our getter/setter class
        classText += '# Global parameter instance for reference' + this._newLine;
        classText += 'VEGLParams = VEGLParameters(';
        for (var i = 0; i < fieldsToInclude.length; i++) {
            var field = fieldsToInclude[i];
            var value = values[field];
            classText += field + '=' + this._getPrimitiveValue(value);
            if (i < (fieldsToInclude.length - 1)) {
                classText += ', ';
            }
        }
        classText += ')' + this._newLine;


        classText += this._newLine;

        return classText;
    }
});
