<?xml version="1.0" encoding="ISO-8859-1"?>
<categories>
	<category name="Shell Components">
		<category name="Amazon Web Service Commands">
			<component title="AWS Download" id="AWSDownload" type="s">
				Download a file from the Amazon web service S3 and store it
				on the local file system.
			</component>
			<component title="AWS Upload" id="AWSUpload" type="s">
				Upload a file from the local file system to the Amazon S3.
			</component>
		</category>

		<category name="Open MPI Commands">
			<component title="MPI Run" id="MPIRun" type="s">
				Execute serial and parallel jobs in Open MPI.
			</component>
		</category>

		<category name="Shell Commands">
			<component title="cd (Change Directory)" id="ChangeDir" type="s">
				Changes the current working directory.
			</component>
		</category>
	</category>
	<category name="Python Components">
		<category name="VEGL Workflow Steps">
			<component title="VEGL Step 1" id="VEGLStep1" type="s">
Reads in a 3 column CSV file, assumes the data are floating point numbers, and places these columns into the variable 'data'.
			</component>
			<component title="Step 2" id="VEGLStep2" type="s">
Takes the variable 'data' and transforms the coordinates to a different coordinate system.
This is because the national-scale data are geodetic (unprojected) and we need a projected coordinate system for a UBC-GIF inversion.
			</component>
			<component title="Step 3" id="VEGLStep3" type="s">
Takes the variable 'data' and removes any data points which do not lie within a given bounding box. Assumes the coordinate systems of 'data' and the bounding box are the same.
			</component>
			<component title="Step 4" id="VEGLStep4" type="s">
We need to determine the type of inversion. There are some corrections to be made to each type of data. The parameters for the inversions also vary slightly, as do the control files.
			</component>
			<component title="Step 5" id="VEGLStep5" type="s">
				Step 5
			</component>
			<component title="Step 6" id="VEGLStep6" type="s">
				Step 6
			</component>
		</category>
		<category name="File Commands">
			<component title="File Read" id="fileread" type="s">
				File Reader
			</component>
			<component title="File Write" id="filewrite" type="s">
				File Reader
			</component>
		</category>
		<category name="Execute Commands">
			<component title="Execute this" id="subprocess" type="s">
				Execute and capture error/output via subprocess
			</component>
		</category>
		<component title="Job Details" id="jobobject" type="s">
			Place Job specifics inside a python dictionary.
		</component>
	</category>
</categories>

